// PROJECT     : The CharlieClock
// PURPOSE     : A charlieplexing clock that can be controlled manually by buttons
// COURSE      : ICS4U-E
// AUTHOR      : Lucas Quintas - Tang
// DATE        : 09/21/2024
// MCU         : 328p (NANO)
// STATUS      : Working

uint8_t P1  = A2;    //clock pin definitions PCB 2
uint8_t P2  = A1;
uint8_t P3  = A0;
uint8_t P4  = 12;
uint8_t P5  = 11;
uint8_t P6  = 8;
uint8_t P7  = 7;
uint8_t P8  = 6;
uint8_t P9  = 5;
uint8_t P10 = 4;
uint8_t P11 = 3;
uint8_t P12 = 2;

uint8_t BH = A5;    //button pin definitions
uint8_t BM = A4;
uint8_t BS = A3;

uint8_t pins[] = { P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12 };       
//thereâ€™s an anode & cathode for all of these pins.
struct LED {    //struct to define al LED's by their cathode and anode pins
  uint8_t anode;    //anode pin of each LED
  uint8_t cathode;    // cathode pin of each LED
};

LED hours[] = {   //array for all hour LED's
  { P9, P1 }, { P10, P1 }, { P11, P1 }, { P12, P1 }, { P12, P11 }, { P5, P1 }, { P4, P1 }, { P3, P1 }, { P2, P1 }, { P6, P1 }, { P7, P1 }, { P8, P1 }
};

LED minutes[] = {   //array for all minute LED's
  { P8, P2 }, { P9, P2 }, { P10, P2 }, { P11, P2 }, { P12, P2 }, { P1, P12 }, { P2, P12 }, { P3, P12 }, { P4, P12 }, { P5, P12 }, { P6, P12 }, { P7, P12 }, { P8, P12 }, { P9, P12 }, { P10, P12 }, { P11, P12 }, { P10, P11 }, { P9, P11 }, { P8, P11 }, { P7, P11 }, { P6, P11 }, { P5, P11 }, { P4, P11 }, { P3, P11 }, { P2, P11 }, { P1, P11 }, { P12, P10 }, { P11, P10 }, { P9, P10 }, { P8, P10 }, { P7, P10 }, { P6, P10 }, { P5, P10 }, { P4, P10 }, { P3, P10 }, { P2, P10 }, { P1, P10 }, { P7, P4 }, { P6, P4 }, { P5, P4 }, { P3, P4 }, { P2, P4 }, { P1, P4 }, { P1, P3 }, { P2, P3 }, { P4, P3 }, { P5, P3 }, { P6, P3 }, { P7, P3 }, { P8, P3 }, { P9, P3 }, { P10, P3 }, { P11, P3 }, { P12, P3 }, { P1, P2 }, { P3, P2 }, { P4, P2 }, { P5, P2 }, { P6, P2 }, { P7, P2 }
};

LED seconds[] = {     //array for all second LED's
  { P1, P5 }, { P2, P5 }, { P3, P5 }, { P4, P5 }, { P6, P5 }, { P7, P5 }, { P8, P5 }, { P9, P5 }, { P10, P5 }, { P11, P5 }, { P12, P5 }, { P8, P4 }, { P9, P4 }, { P10, P4 }, { P11, P4 }, { P12, P4 }, { P12, P9 }, { P11, P9 }, { P10, P9 }, { P8, P9 }, { P7, P9 }, { P6, P9 }, { P5, P9 }, { P4, P9 }, { P3, P9 }, { P2, P9 }, { P1, P9 }, { P12, P8 }, { P11, P8 }, { P10, P8 }, { P9, P8 }, { P7, P8 }, { P6, P8 }, { P5, P8 }, { P4, P8 }, { P3, P8 }, { P2, P8 }, { P1, P8 }, { P12, P7 }, { P11, P7 }, { P10, P7 }, { P9, P7 }, { P8, P7 }, { P6, P7 }, { P5, P7 }, { P4, P7 }, { P3, P7 }, { P2, P7 }, { P1, P7 }, { P1, P6 }, { P2, P6 }, { P3, P6 }, { P4, P6 }, { P5, P6 }, { P7, P6 }, { P8, P6 }, { P9, P6 }, { P10, P6 }, { P11, P6 }, { P12, P6 }
};

int currentSecond = 45;   // Variables for current time initialization
int currentMinute = 58;  
int currentHour = 3;     

uint8_t Hstate = 0;  //stores current the state of the buttons
uint8_t Mstate = 0;  
uint8_t Sstate = 0;  

int lastHstate = LOW;   //previous button states
int lastMstate = LOW;  
int lastSstate = LOW;
// Variables for handling timing (millis() based)
unsigned long previousMillis = 0;  // Stores the last time an update occurred
const long interval = 1000;        // Interval of 1 second for updating the clock

void setup() {
  for (int i = 2; i <= 13; i++) {   // Initialize digital pins 2 to 13 as input
    pinMode(i, INPUT);  // Set each pin to input mode
  }

  for (int i = A0; i <= A4; i++) {   // Initialize analog pins A0 to A4 as input
    pinMode(i, INPUT);  // Set each pin to input mode
  }
}

void setPinModesForLED (int anode, int cathode) {// set pin modes for a specific LED
  for (int i = 0; i < 13; i++) {   // Reset all pins to input mode
    pinMode(pins[i], INPUT);  // Set all defined pins as input
  }

  pinMode(anode, OUTPUT);   // Set anode pin to output mode and turn HIGH
  digitalWrite (anode, HIGH); // Light up the anode

  pinMode (cathode, OUTPUT);  // Set cathode pin to output mode and turn LOW
  digitalWrite (cathode, LOW); // Turn off the cathode
}

void setPinModesForLED (int anode, int cathode) {  // Function to set the pin modes for a specific LED
  for (int i = 0; i < 13; i++) {            // Reset all pins to input mode
    pinMode(pins[i], INPUT);                // Set all defined pins as input
  }

  pinMode(anode, OUTPUT);     // Set anode pin to output mode and turn HIGH
  digitalWrite(anode, HIGH);  // Light up the anode
  pinMode(cathode, OUTPUT);    // Set cathode pin to output mode and turn LOW
  digitalWrite(cathode, LOW);  // Turn off the cathode
}

void loop() {
  unsigned long currentMillis = millis();  // Get current time in milliseconds

  if (currentMillis - previousMillis >= interval) {   //Check if 1 second has passed
    previousMillis = currentMillis;      // Save the current time for next cycle
    setPinModesForLED(seconds[currentSecond].anode, seconds[currentSecond].cathode);  

    if (currentSecond == 59) {            // Check if 60 seconds have passed
      currentSecond = 0;                 // Reset seconds to 0
      currentMinute = (currentMinute + 1) % 60;  // Increment minute and wrap at 60
     setPinModesForLED(minutes[currentMinute].anode,minutes[currentMinute].cathode);

      if (currentMinute == 0) {           // Check if 60 minutes have passed
        currentHour = (currentHour + 1) % 12; // Increment hour and wrap at 12
        setPinModesForLED(hours[currentHour].anode, hours[currentHour].cathode);  
      }
    } else {
      currentSecond++;  // Increment the second
    }
  }
// Ensure correct LEDs for the current second, minute, and hour are always displayed
  setPinModesForLED(seconds[currentSecond].anode, seconds[currentSecond].cathode);  
  setPinModesForLED(minutes[currentMinute].anode, minutes[currentMinute].cathode);
  setPinModesForLED(hours[currentHour].anode, hours[currentHour].cathode);
  // Read the state of the buttons (for hours, minutes, and seconds)
  int Hstate = digitalRead(BH);  // Read the hour button state
  int Mstate = digitalRead(BM);  // Read the minute button state
  int Sstate = digitalRead(BS);  // Read the second button state

  if (Hstate == HIGH && lastHstate == LOW) {  // Check if hour button was pressed 
    currentHour = (currentHour + 1) % 12;  // Increment the hour and wrap at 12
    setPinModesForLED(hours[currentHour].anode, hours[currentHour].cathode);  
  }

  if (Mstate == HIGH && lastMstate == LOW) {   //Check if minute button was pressed 
    currentMinute = (currentMinute + 1) % 60; // Increment the minute and wrap at 60
    setPinModesForLED(minutes[currentMinute].anode, minutes[currentMinute].cathode);  
  }

  if (Sstate == HIGH && lastSstate == LOW) { // Check if second button was pressed 
    currentSecond = (currentSecond + 1) % 60; //Increment the second and wrap at 60
    setPinModesForLED(seconds[currentSecond].anode, seconds[currentSecond].cathode);  
  }
  // Store the current button states for the next loop iteration
  lastHstate = Hstate;  // Store the hour button state
  lastMstate = Mstate;  // Store the minute button state
  lastSstate = Sstate;  // Store the second button state
}
